## [1713. 得到子序列的最少操作次数](https://leetcode.cn/problems/minimum-operations-to-make-a-subsequence/description/)

## 题目描述

给你一个数组 target ，包含若干 互不相同 的整数，以及另一个整数数组 arr ，arr 可能 包含重复元素。

每一次操作中，你可以在 arr 的任意位置插入任一整数。比方说，如果 arr = [1,4,1,2] ，那么你可以在中间添加 3 得到 [1,4,3,1,2] 。你可以在数组最开始或最后面添加整数。

请你返回 最少 操作次数，使得 target 成为 arr 的一个子序列。

一个数组的 子序列 指的是删除原数组的某些元素（可能一个元素都不删除），同时不改变其余元素的相对顺序得到的数组。比方说，[2,7,4] 是 [4,2,3,7,2,1,4] 的子序列（加粗元素），但 [2,4,2] 不是子序列。

## 题目考点

贪心、动态规划、二分

## 题解一（最长公共子序列 · LCS 问题 · 超出时间限制）

最长公众子序列越长，需要插入的字符越少，而答案等于 n - maxLength
 
```
class Solution {
    fun minOperations(target: IntArray, arr: IntArray): Int {
        // LCS 最长公共子序列解法
        val n = target.size
        val m = arr.size
        val dp = Array(n + 1) { IntArray(m + 1) { 0 } }
        for (i in 1..n) {
            for (j in 1..m) {
                dp[i][j] = if (target[i - 1] == arr[j - 1]) {
                    dp[i - 1][j - 1] + 1
                } else {
                    Math.max(dp[i - 1][j], dp[i][j - 1])
                }
            }
        }
        return n - dp[n][m]
    }
}
```

**复杂度分析：**

- 时间复杂度：O(nm)
- 空间复杂度：O(nm) 

## 题解二（最长上升子序列 · LIS 问题）

由于 target 数组的元素不重复，我们可以将原问题转换为求 LIS 最长递增子序列问题（存在贪心 + 二分的 nlgn 解法）

我们先使用散列表记录 target 中每个元素与下标的映射关系，再将 arr 数组中的每个元素映射到 target 的下标上：

例如：

target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]

映射为：

target′= [0,1,2,3,4,5], arr'= [1,0,5,4,2,0,3]

此时问题等价于求转换后的最长公共子序列，由于 target 是递增的，也等价于求 arr 最长递增子序列后，由 n - max

```
class Solution {
    fun minOperations(target: IntArray, arr: IntArray): Int {
        val n = target.size
        // 坐标映射
        val targetMap = HashMap<Int, Int>()
        for (index in target.indices) {
            targetMap[target[index]] = index
        }
        var newArr: MutableList<Int> = LinkedList<Int>()
        for (index in arr.indices) {
            // 忽略不存在于 target 中的元素
            if (targetMap.containsKey(arr[index])) {
                newArr.add(targetMap[arr[index]]!!)
            }
        }
        newArr = ArrayList(newArr)
        // 求 arr 的最长递增子序列
        val m = newArr.size
        if(0 == m) return n
        val dp = IntArray(m + 1)
        var len = 1
        dp[1] = newArr[0]
        for (index in 1 until m) {
            if (dp[len] < newArr[index]) {
                dp[++len] = newArr[index]
            } else {
                var left = 1
                var right = len
                while (left < right) {
                    val mid = (left + right) ushr 1
                    if (dp[mid] < newArr[index]) {
                        left = mid + 1
                    } else {
                        right = mid
                    }
                }
                dp[left] = newArr[index]
            }
        }
        return n - len
    }
}
```

优化:

```
class Solution {
    fun minOperations(target: IntArray, arr: IntArray): Int {
        val n = target.size
        val m = arr.size
        // 坐标映射
        val targetMap = HashMap<Int, Int>()
        for (index in target.indices) {
            targetMap[target[index]] = index
        }
        // 求 arr 的最长递增子序列
        val dp = IntArray(m + 1)
        var len = 0
        dp[0] = Integer.MIN_VALUE
        for (index in 0 until m) {
            if (!targetMap.containsKey(arr[index])) continue
            val targetIndex = targetMap[arr[index]]!!
            if (dp[len] < targetIndex) {
                dp[++len] = targetIndex
            } else {
                var left = 1
                var right = len
                while (left < right) {
                    val mid = (left + right) ushr 1
                    if (dp[mid] < targetIndex) {
                        left = mid + 1
                    } else {
                        right = mid
                    }
                }
                dp[left] = targetIndex
            }
        }
        return n - len
    }
}
```

**复杂度分析：**

- 时间复杂度：O(n + m + mlgm) m 是 arr 数组的长度
- 空间复杂度：O(n) 
